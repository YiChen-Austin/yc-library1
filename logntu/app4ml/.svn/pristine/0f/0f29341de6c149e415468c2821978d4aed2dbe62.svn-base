package com.mall.web.mall.main.controller;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.mall.common.exception.FrameworkException;
import com.mall.common.util.BaseUtil;
import com.mall.common.util.VerificationUtil;
import com.mall.web.admin.common.annotation.Auth;
import com.mall.web.admin.common.utils.BaseAction;
import com.mall.web.mall.common.annotation.MemberAuth;
import com.mall.web.mall.common.utils.CkSessionUtils;
import com.mall.web.mall.common.utils.HttpSendSms;
import com.mall.web.mall.common.utils.MallEnum;
import com.mall.web.mall.domain.Member;
import com.mall.web.mall.member.service.WebMemberService;
import com.mall.web.mall.member.vo.WebMemberVo;

@Controller
@RequestMapping("/member/")
public class PersonMainController extends BaseAction {
	private static Logger logger = Logger.getLogger(PersonMainController.class);
	@Resource(name = "webMemberService")
	private WebMemberService webMemberService;

	/**
	 * 个人中心首页
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("main")
	@MemberAuth(verifyLogin = true)
	public ModelAndView index(HttpServletRequest request, HttpServletResponse response, String service) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("person/main");
		return mav;
	}

	/**
	 * 注册导航
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("reg")
	@MemberAuth(verifyLogin = false)
	public ModelAndView reg(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("person/register/reg");
		return mav;
	}

	/**
	 * 个人中心（邮件注册）
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("reg4Email")
	@MemberAuth(verifyLogin = false)
	public ModelAndView reg4Email(HttpServletRequest request, HttpServletResponse response, WebMemberVo memberVo,
			String code) {
		ModelAndView mav = new ModelAndView();
		Map<String, Object> result = new HashMap<String, Object>();
		mav.setViewName("person/register/reg");
		result.put("regType", "email");

		// 判断是否已经登录
		if (!BaseUtil.isEmpty(CkSessionUtils.getUser(request))) {
			mav.setViewName("redirect:/member/index");
			return mav;
		}
		if (BaseUtil.isEmpty(memberVo) || BaseUtil.isEmpty(memberVo.getEmail())) {
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
			mav.addAllObjects(result);
			return mav;
		}
		// 验证码是否正确
		String vcode = CkSessionUtils.getValidateCode(request);
		CkSessionUtils.removeValidateCode(request);
		if (BaseUtil.isEmpty(vcode) || BaseUtil.isEmpty(code) || !vcode.equalsIgnoreCase(code)) {
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
			result.put("msg", "验证码错误");
			mav.addAllObjects(result);
			return mav;
		}
		// 注册处理
		try {
			Member member = webMemberService.regist4Em(memberVo);
			// 注册失败
			if (BaseUtil.isEmpty(member)) {
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.OtherErr.getIndex());
				result.put("msg", "注册失败");
				mav.addAllObjects(result);
				return mav;
			} // 成功注册(跳转邮箱验证页面)
			else {
				// 发送邮件
				String baseUri = request.getRequestURL().toString();
				baseUri = baseUri.substring(0, baseUri.indexOf(request.getRequestURI()));
				baseUri += request.getContextPath();
				webMemberService.sendRegEmail(member, baseUri);

				mav.setViewName("person/register/emailSucc");
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.Success.getIndex());
				result.put("msg", "注册成功");
				String mail = memberVo.getEmail();
				result.put("mailUrl", "http://mail." + mail.substring(mail.indexOf("@") + 1));// 前往邮箱地址
				mav.addAllObjects(result);
				return mav;
			}
		} catch (Exception e) {
			logger.warn(e);
			e.printStackTrace();
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.OtherErr.getIndex());
			result.put("msg", "注册失败");
			mav.addAllObjects(result);
			return mav;
		}
	}

	/**
	 * 个人中心首页
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("confirmEmail")
	@MemberAuth(verifyLogin = false)
	public ModelAndView confirmEmail(HttpServletRequest request, HttpServletResponse response, String contextId,
			String checkCode) {
		ModelAndView mav = new ModelAndView();
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			int userId = webMemberService.getRegValidId(contextId);
			if (userId <= 0) {
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.OtherErr.getIndex());
				result.put("msg", "激活失败");
			}//进行激活处理
			else if(webMemberService.activateRegEm(userId, checkCode)){
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.Success.getIndex());
				result.put("msg", "激活成功");
			}else{
			    result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.OtherErr.getIndex());
			    result.put("msg", "激活失败");
			}
		} catch (Exception e) {
			logger.warn(e);
			e.printStackTrace();
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.OtherErr.getIndex());
			result.put("msg", "激活失败");
			return mav;
		}
		mav.setViewName("person/register/confirmEmail");
		mav.addAllObjects(result);
		return mav;
	}

	/**
	 * 个人中心（短信注册）
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("reg4Sm")
	@MemberAuth(verifyLogin = false)
	public ModelAndView reg4Sm(HttpServletRequest request, HttpServletResponse response, WebMemberVo memberVo,
			String code) {
		ModelAndView mav = new ModelAndView();
		Map<String, Object> result = new HashMap<String, Object>();
		mav.setViewName("person/register/reg");
		result.put("regType", "sms");

		// 判断是否已经登录
		if (!BaseUtil.isEmpty(CkSessionUtils.getUser(request))) {
			mav.setViewName("redirect:/member/index");
			return mav;
		}
		if (BaseUtil.isEmpty(memberVo) || BaseUtil.isEmpty(memberVo.getPhoneMob())) {
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
			mav.addAllObjects(result);
			return mav;
		}
		// 短信验证码是否正确
		String vcode = CkSessionUtils.getSmValidateCode(request);
		CkSessionUtils.removeSmValidateCode(request);
		if (BaseUtil.isEmpty(vcode) || BaseUtil.isEmpty(code) || !vcode.equalsIgnoreCase(code)) {
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
			result.put("msg", "验证码错误");
			mav.addAllObjects(result);
			return mav;
		}
		// 注册处理
		try {
			// 注册失败
			if (!webMemberService.regist4Sm(memberVo)) {
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.OtherErr.getIndex());
				result.put("msg", "注册失败");
				mav.addAllObjects(result);
				return mav;
			} // 成功注册(跳转邮箱验证页面)
			else {
				mav.setViewName("redirect:/member/index");
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.Success.getIndex());
				result.put("msg", "注册成功");
				mav.addAllObjects(result);
				return mav;
			}
		} catch (Exception e) {
			logger.warn(e);
			e.printStackTrace();
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.OtherErr.getIndex());
			result.put("msg", "注册失败");
			mav.addAllObjects(result);
			return mav;
		}
	}

	/**
	 * 个人中心（登陆）
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("login")
	@MemberAuth(verifyLogin = false)
	public ModelAndView login(HttpServletRequest request, HttpServletResponse response, WebMemberVo memberVo,
			String service) {
		ModelAndView mav = new ModelAndView();
		Map<String, Object> result = new HashMap<String, Object>();
		// 判断是否已经登录
		if (!BaseUtil.isEmpty(CkSessionUtils.getUser(request))) {
			if (!BaseUtil.isEmpty(service)) {
				mav.setViewName("redirect:" + service);
				return mav;
			}
			mav.setViewName("redirect:/member/index");
			return mav;
		}
		// get方式提取数据
		if ("get".equalsIgnoreCase(request.getMethod())) {
			mav.setViewName("person/login/login");
			result.put("service", service);
			mav.addObject(result);
			return mav;
		}
		if (BaseUtil.isEmpty(memberVo) || BaseUtil.isEmpty(memberVo.getUserName())
				|| BaseUtil.isEmpty(memberVo.getPassword())) {
			mav.setViewName("person/login/login");
			mav.addObject("service", service);
			return mav;
		}
		try {
			WebMemberVo user = webMemberService.login(memberVo);
			// 登录失败
			if (user == null) {
				mav.setViewName("person/login/login");
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
				result.put("msg", "用户名或密码错误");
				mav.addObject(result);
				return mav;
			}
			CkSessionUtils.setUser(request, user);
			webMemberService.updateLogin(user.getUserId(), getIpAddr(request));
			// 是否十天内自动登录
			// if ("1".equalsIgnoreCase(memberVo.getAutoLogin())) {
			// String tk = autoLoginService.saveAutoLogin(
			// Integer.toString(user.getId()), user.getUserName(),
			// request.getRemoteAddr());
			// CookieUtils.setCookie(request, response, "localhost",
			// CommonConstant.COOKIE_AUTH, tk, 15 * 24 * 60 * 60,
			// "UTF-8");
			// // mav.setViewName("redirect:/member/index");
			// // return mav;
			// }
		} catch (Exception e) {
			logger.warn(e);
			e.printStackTrace();
		}
		if (BaseUtil.isEmpty(service)) {
			service = "/member/index";
		}
		mav.setViewName("redirect:" + service);
		return mav;
	}

	/**
	 * 个人中心（登陆）
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("login4ajax")
	@MemberAuth(verifyLogin = false)
	@ResponseBody
	public ModelAndView login4ajax(HttpServletRequest request, HttpServletResponse response, WebMemberVo memberVo,
			String service) {
		ModelAndView mav = new ModelAndView();
		Map<String, Object> result = new HashMap<String, Object>();
		// 判断是否已经登录
		if (!BaseUtil.isEmpty(CkSessionUtils.getUser(request))) {
			if (!BaseUtil.isEmpty(service)) {
				mav.setViewName("redirect:" + service);
				return mav;
			}
			mav.setViewName("redirect:/member/index");
			return mav;
		}
		// get方式提取数据
		if ("get".equalsIgnoreCase(request.getMethod())) {
			mav.setViewName("person/login/login");
			result.put("service", service);
			mav.addObject(result);
			return mav;
		}
		if (BaseUtil.isEmpty(memberVo) || BaseUtil.isEmpty(memberVo.getUserName())
				|| BaseUtil.isEmpty(memberVo.getPassword())) {
			mav.setViewName("person/login/login");
			mav.addObject("service", service);
			return mav;
		}
		try {
			WebMemberVo user = webMemberService.login(memberVo);
			// 登录失败
			if (user == null) {
				mav.setViewName("person/login/login");
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
				result.put("msg", "用户名或密码错误");
				mav.addObject(result);
				return mav;
			}
			CkSessionUtils.setUser(request, user);
			webMemberService.updateLogin(user.getUserId(), getIpAddr(request));
			// 是否十天内自动登录
			// if ("1".equalsIgnoreCase(memberVo.getAutoLogin())) {
			// String tk = autoLoginService.saveAutoLogin(
			// Integer.toString(user.getId()), user.getUserName(),
			// request.getRemoteAddr());
			// CookieUtils.setCookie(request, response, "localhost",
			// CommonConstant.COOKIE_AUTH, tk, 15 * 24 * 60 * 60,
			// "UTF-8");
			// // mav.setViewName("redirect:/member/index");
			// // return mav;
			// }
		} catch (Exception e) {
			logger.warn(e);
			e.printStackTrace();
		}
		if (BaseUtil.isEmpty(service)) {
			service = "/member/index";
		}
		mav.setViewName("redirect:" + service);
		return mav;
	}

	/**
	 * 用户协议
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("agreement")
	@MemberAuth(verifyLogin = false)
	public ModelAndView agreement(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("person/agreement/agreement");
		return mav;
	}
	/**
	 * 邮件发送
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("emailSucc")
	@MemberAuth(verifyLogin = false)
	public ModelAndView emailSucc(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("person/register/emailSucc");
		return mav;
	}


	/**
	 * 404
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("err404")
	@MemberAuth(verifyLogin = false)
	public ModelAndView error(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("person/error/404");
		return mav;
	}

	/**
	 * 判断用户是否登陆过，如果已登陆则直接到主页面，未登陆则进入登陆界面
	 * 
	 * @return
	 * @throws FrameworkException
	 * @throws Exception
	 */
	@RequestMapping(value = { "/index", "/index/*", "/index/*/*" })
	@MemberAuth(verifyLogin = false)
	public ModelAndView index(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView();
		// 用户登陆信息
		WebMemberVo user = CkSessionUtils.getUser(request);
		// 判断用户是否登陆,登陆则跳转主页面
		if (!BaseUtil.isEmpty(user)) {
			mav.setViewName("redirect:/member/main");
		}
		// 如果未登陆，则跳转登陆页面
		else {
			mav.setViewName("person/login/login");
		}
		return mav;
	}

	/***************************/
	/**
	 * 图片验证码生成接口
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("vcode")
	@Auth(verifyLogin = false, verifyURL = false)
	public void verification(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String validateCode = VerificationUtil.getInstance().getCheckCodeImage(4);
		CkSessionUtils.setValidateCode(request, validateCode);
		VerificationUtil.getInstance().writeCheckCodeImage(validateCode, response.getOutputStream());

	}

	/**
	 * 短信验证码发送
	 * 
	 * @param phone
	 *            手机号码
	 */
	@RequestMapping("smsSend")
	@ResponseBody
	public Map<String, Object> smsSend(HttpServletRequest request, String phone, String code) {
		Map<String, Object> result = new HashMap<String, Object>();
		String vcode = CkSessionUtils.getValidateCode(request);
		CkSessionUtils.removeValidateCode(request);
		// # 错误码: 图片验证码错误
		if (BaseUtil.isEmpty(vcode) ||BaseUtil.isEmpty(phone) || BaseUtil.isEmpty(code) || !code.equals(vcode)) {
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
			return result;
		}
		try {
			String validCode = VerificationUtil.getInstance().getCheckCodeImage("0123456789", 6);// 验证码
			CkSessionUtils.setSmValidateCode(request, validCode);
			HttpSendSms.postSend(phone, validCode);
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.Success.getIndex());
		} catch (Exception e) {
			e.printStackTrace();
			logger.warn(e);
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.SysErr.getIndex());
		}
		return result;
	}
}
