package com.mall.web.pay.action;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.mall.common.util.BaseUtil;
import com.mall.web.mall.common.utils.MallEnum;
import com.mall.web.mall.common.vo.DataJsonBean;
import com.mall.web.mall.common.vo.ServerZoneBean;
import com.mall.web.mall.member.service.WebMemberService;

@Controller
public class PayController {
	private static Logger logger = Logger.getLogger(PayController.class);

	@Resource(name = "webMemberService")
	private WebMemberService webMemberService;

	/**
	 * 游戏支付界面（无需登录）
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/pay4nl")
	public ModelAndView pay4nl(HttpServletRequest request, HttpServletResponse response, String returnUrl) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("person/pay/pay4nl");
		return mav;
	}

	/**
	 * 龙币支付界面（须登录）
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/pay4l")
	public ModelAndView pay4l(HttpServletRequest request, HttpServletResponse response, String returnUrl) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("person/pay/pay4l");
		return mav;
	}

	/**
	 * 获取区域服务器
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/pay/serverZone")
	@ResponseBody
	public Object serverZone(String serverId) {
		List<ServerZoneBean> value = new LinkedList<ServerZoneBean>();
		List<ServerZoneBean> list = null;
		if (BaseUtil.isEmpty(serverId)) {
			list = DataJsonBean.serverZoneBean.getSubZones();
		} else {
			ServerZoneBean zone = DataJsonBean.serverZoneMap.get(serverId);
			list = (zone != null ? zone.getSubZones() : null);
		}
		for (ServerZoneBean zone : list) {
			ServerZoneBean zoneBean = new ServerZoneBean();
			zoneBean.copySplValue(zone);
			value.add(zoneBean);
		}
		return value;
	}

	/**
	 * 获取用户所在区域服务器的角色列表
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/pay/serverRole")
	@ResponseBody
	public Object serverRole(HttpServletResponse response, String userName, String serverId) {
		try {
			String roles = "[{\"roleId\":\"abcde-efadfee-xafeef-xxxxx\",\"roleName\":\"杀破浪\"},{\"roleId\":\"abcde-efadfee-xafeef-ffff\",\"roleName\":\"东西南白\"}]";
			response.setContentType("text/html;charset=UTF-8");
			response.getOutputStream().write(roles.getBytes("UTF-8"));
		} catch (Exception e) {
			e.printStackTrace();
			logger.warn(e);
		}
		return null;
	}

	/**
	 * 获取用户名是否存在
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/pay/validUn")
	@ResponseBody
	public Object validUn(HttpServletResponse response, String userName) {
		Map<String, Integer> result = new HashMap<String, Integer>();
		try {
			if (BaseUtil.isEmpty(userName) || BaseUtil.isEmpty(webMemberService.getUserInfo(userName))) {
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
			} else {
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.Success.getIndex());
			}
		} catch (Exception e) {
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.SysErr.getIndex());
			e.printStackTrace();
			logger.warn(e);
		}
		return result;
	}

	/**
	 * 获取用户名、所在服務器id角色是否存在
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/pay/validUnRl")
	@ResponseBody
	public Object validUnRl(HttpServletResponse response, String userName, String serverId, String roleId) {
		Map<String, Integer> result = new HashMap<String, Integer>();
		try {
			if (BaseUtil.isEmpty(userName) || BaseUtil.isEmpty(serverId) || BaseUtil.isEmpty(roleId)) {
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.DataErr.getIndex());
			} else if (BaseUtil.isEmpty(webMemberService.getUserInfo(userName))) {
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.OtherErr.getIndex());
			} else {
				result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.Success.getIndex());
			}
		} catch (Exception e) {
			result.put(MallEnum.ServiceCodeType.ServiceCode, MallEnum.ServiceCodeType.SysErr.getIndex());
			e.printStackTrace();
			logger.warn(e);
		}
		return result;
	}
}
