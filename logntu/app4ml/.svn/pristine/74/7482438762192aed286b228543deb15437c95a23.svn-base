package com.mall.web.mall.member.service;

import java.math.BigDecimal;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mall.common.exception.FrameworkException;
import com.mall.web.mall.common.utils.MallEnum.BalanceReserve;
import com.mall.web.mall.domain.MemberDeposit;
import com.mall.web.mall.member.dao.WebMemberDepositDao;
import com.mall.web.mall.member.dao.WebMemberFrozenDao;
import com.mall.web.mall.member.dao.WebMemberPayRecordDao;
import com.mall.web.mall.member.vo.WebMemberDepositVo;

/**
 * 账户信息
 * 
 */
@Service("webMemberDepositService")
public class WebMemberDepositService {

	private static Logger logger = Logger
			.getLogger(WebMemberDepositService.class);
	@Resource(name = "webMemberDepositDao")
	private WebMemberDepositDao webMemberDepositDao;
	@Resource(name = "webMemberPayRecordDao")
	private WebMemberPayRecordDao webMemberPayRecordDao;
	@Resource(name = "webMemberFrozenDao")
	private WebMemberFrozenDao webMemberFrozenDao;// 冻结

	/*******************************************************************************/
	/**
	 * 
	 * @param userId
	 *            用户编号
	 * @return 会员支付账户实例
	 * @throws FrameworkException
	 */
	public MemberDeposit getMemberDepositById(int userId)
			throws FrameworkException {
		MemberDeposit memberDeposit = webMemberDepositDao.get(userId);
		return memberDeposit;
	}

	/**
	 * 获取会员账户详细信息！！！。
	 * 
	 * @param userId
	 *            用户编号
	 * @return 会员支付账户实例
	 * @throws FrameworkException
	 */
	public WebMemberDepositVo getMemberDeposit(int userId)
			throws FrameworkException {
		MemberDeposit memberDeposit = webMemberDepositDao.get(userId);
		WebMemberDepositVo res = WebMemberDepositVo.bean2Vo(memberDeposit); // 封装
		return res;
	}

	/**
	 * @Description(功能描述) : 获取提现余额
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public double getWithdrawDeposit(int userId) throws FrameworkException {
		MemberDeposit memberDeposit = webMemberDepositDao.get(userId);
		if (memberDeposit == null)
			return 0;
		return memberDeposit.getBalance() > BalanceReserve.YUAN10.getName() ? memberDeposit
				.getBalance() - BalanceReserve.YUAN10.getName()
				: 0;
	}

	/**
	 * @Description(功能描述) : 余额支付
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional
	public boolean reduceBalance(int userId, double reduce) {
		int u = webMemberDepositDao.reduceBalance(userId, reduce);
		try {
			if (u > 0)
				webMemberPayRecordDao.reduceBalance(userId, reduce);
		} catch (FrameworkException e) {
			logger.warn(e);
		}
		return u > 0 ? true : false;
	}

	/**
	 * @Description(功能描述) : 扣除积分
	 * @author(作者) : ventrue
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional
	public int reducePoint(int userId, int point) {
		return webMemberDepositDao.reducePoint(userId, point);
	}

	/**
	 * @Description(功能描述) : 扣除积分
	 * @author(作者) : ventrue
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional
	public int plusPoint(int userId, int point) {
		return webMemberDepositDao.plusPoint(userId, point);
	}

	/**
	 * @Description(功能描述) : 余额转冻结(提现)
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional
	public boolean reduceBlance2Frozen(int userId, double reduce) {
		int u = 0;
		try {
			u = webMemberDepositDao.reduceBalance(userId, reduce,
					BalanceReserve.YUAN10.getName());// 预留
			if (u > 0) {
				webMemberPayRecordDao.reduceFrozenPay(userId, reduce);
				webMemberFrozenDao.saveBalance2Frozen(userId,
						BigDecimal.valueOf(reduce));
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.warn(e);
		}
		return u > 0 ? true : false;
	}

	/**
	 * @Description(功能描述) : 增加金额
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional
	public boolean plusBalance(int userId, double plus) {
		int u = webMemberDepositDao.plusBalance(userId, plus);
		try {
			if (u > 0)
				webMemberPayRecordDao.plusBalance(userId, plus);
		} catch (FrameworkException e) {
			logger.warn(e);
		}
		return u > 0 ? true : false;
	}

	/**
	 * @Description(功能描述) : 增加金额(销售结算)
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional
	public boolean plusBalance4Settlement(int userId, double plus, int orderId) {
		int u = webMemberDepositDao.plusBalance(userId, plus);
		try {
			if (u > 0)
				webMemberPayRecordDao.plusBalance4Settlement(userId, plus,
						orderId);
		} catch (FrameworkException e) {
			logger.warn(e);
		}
		return u > 0 ? true : false;
	}

	/**
	 * @Description(功能描述) : (销售结算)数量
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional(readOnly = true)
	public int getPaySize4Settlement(int userId, int orderId)
			throws FrameworkException {
		return webMemberPayRecordDao.getPaySize4Settlement(userId, orderId);
	}

	/**
	 * @Description(功能描述) : 增加金额(佣金)
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional
	public boolean plusBalance4Commission(int userId, double plus, int orderId)
			throws FrameworkException {
		int u = webMemberDepositDao.plusBalance(userId, plus);
		try {
			if (u > 0)
				webMemberPayRecordDao.plusBalance4Commission(userId, plus,
						orderId);
		} catch (FrameworkException e) {
			logger.warn(e);
		}
		return u > 0 ? true : false;
	}

	/**
	 * @Description(功能描述) : (佣金结算)数量
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional(readOnly = true)
	public int getPaySize4Commission(int userId, int orderId)
			throws FrameworkException {
		return webMemberPayRecordDao.getPaySize4Commission(userId, orderId);
	}
}
