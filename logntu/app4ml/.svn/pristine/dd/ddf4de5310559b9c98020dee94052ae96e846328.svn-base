package com.mall.web.mall.member.dao;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Repository;

import com.mall.common.dao.BaseDao;
import com.mall.common.exception.FrameworkException;
import com.mall.common.util.DateUtil;
import com.mall.web.mall.common.utils.MallEnum;
import com.mall.web.pay.domain.PayRecord;

/**
 * 资金变动
 */
@Repository("webMemberPayRecordDao")
public class WebMemberPayRecordDao extends BaseDao<PayRecord> {

	/*******************************************************************************
	 * 获取资金变动信息
	 * 
	 * @author chenhongxu
	 * @param userId
	 *            用户编号
	 * @return 返回存储账目
	 * @throws FrameworkException
	 */

	// 原Sql: select * from ml_pay_record where date_sub(curdate(), interval 90
	// day) <= date(create_time);
	// 原Sql: select * from ml_pay_record where out_user_id=2 and
	// date_sub(curdate(), interval 90 day) <= date(create_time);
	// 原Sql: select * from ml_pay_record where record_id=1112 and
	// date_sub(curdate(), interval 90 day) <= date(create_time);
	//
	// hql
	// public List<PayRecord> showMemberPayRecord(int startPos,int pageSize)
	// throws FrameworkException {
	// StringBuilder hql = new StringBuilder();
	// hql.append("from PayRecord where date_sub(curdate(), interval 90 day) <= date(createTime)");
	// return this.list(hql.toString(),startPos, pageSize);
	// }

	// hql无参
	public List<PayRecord> showMemberPayRecord(Date date)
			throws FrameworkException {
		StringBuilder hql = new StringBuilder();
		hql.append("from PayRecord model where outUserId=2 and model.createTime>=?");
		return this.list(hql.toString(), new Object[] { date });
	}

	// sql
	// public List<PayRecord> showMemberPayRecord() throws FrameworkException
	// {
	// StringBuilder sql = new StringBuilder();
	// sql.append("select * from ml_pay_record where date_sub(curdate(), interval 90 day) <= date(create_time)");
	// sql.append("select * from ml_pay_record where out_user_id=2 and date_sub(curdate(), interval 90 day) <= date(create_time)");
	// return this.list(sql.toString());
	// }
	/**
	 * @Description(功能描述) : 余额支付
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public void reduceBalance(int userId, double reduce)
			throws FrameworkException {
		PayRecord record = new PayRecord(Integer.toString(userId),
				MallEnum.PayRecordServiceType.BalancePay.getIndex(), 0,
				(long) userId, (long) userId, BigDecimal.valueOf(reduce),
				BigDecimal.valueOf(0), BigDecimal.valueOf(0),
				BigDecimal.valueOf(0),
				MallEnum.PayRecordType.Success.getIndex(), DateUtil.getGMTDate(), "余额支付");
		this.save(record);
	}

	/**
	 * @Description(功能描述) : 余额支付
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public void reduceOnlinePay(long userId, double reduce)
			throws FrameworkException {
		PayRecord record = new PayRecord(Long.toString(userId),
				MallEnum.PayRecordServiceType.OnlinePay.getIndex(), 0, 0L,
				(long) userId, BigDecimal.valueOf(reduce),
				BigDecimal.valueOf(0), BigDecimal.valueOf(0),
				BigDecimal.valueOf(0),
				MallEnum.PayRecordType.Success.getIndex(), DateUtil.getGMTDate(), "在线支付");
		this.save(record);
	}

	/**
	 * @Description(功能描述) : 余额转冻结
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public void reduceFrozenPay(long userId, double reduce)
			throws FrameworkException {
		PayRecord record = new PayRecord(Long.toString(userId),
				MallEnum.PayRecordServiceType.Blance2Frozen.getIndex(), 0, 0L,
				(long) userId, BigDecimal.valueOf(reduce),
				BigDecimal.valueOf(0), BigDecimal.valueOf(0),
				BigDecimal.valueOf(0),
				MallEnum.PayRecordType.Success.getIndex(), DateUtil.getGMTDate(), "余额转冻结");
		this.save(record);
	}

	/**
	 * @Description(功能描述) : 增加金额
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public void plusBalance(int userId, double plus) throws FrameworkException {
		PayRecord record = new PayRecord(Integer.toString(userId),
				MallEnum.PayRecordServiceType.BalancePay.getIndex(), 0,
				(long) userId, (long) userId, BigDecimal.valueOf(plus),
				BigDecimal.valueOf(0), BigDecimal.valueOf(0),
				BigDecimal.valueOf(0),
				MallEnum.PayRecordType.Success.getIndex(), DateUtil.getGMTDate(), "增加金额");
		this.save(record);
	}

	/**
	 * @Description(功能描述) : 增加金额(佣金)
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public void plusBalance4Commission(int userId, double plus, int orderId)
			throws FrameworkException {
		PayRecord record = new PayRecord(Integer.toString(userId),
				MallEnum.PayRecordServiceType.Commission.getIndex(), orderId,
				(long) userId, (long) userId, BigDecimal.valueOf(plus),
				BigDecimal.valueOf(0), BigDecimal.valueOf(0),
				BigDecimal.valueOf(0),
				MallEnum.PayRecordType.Success.getIndex(), DateUtil.getGMTDate(), "佣金发放");
		this.save(record);
	}

	/**
	 * @Description(功能描述) : (佣金结算)数量
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public int getPaySize4Commission(int userId, int orderId)
			throws FrameworkException {
		String hql = "select count(*) from PayRecord where primaryId=? and serviceType=? and typeId=?";
		return this.getTotal(hql, new Object[] { Integer.toString(userId),
				MallEnum.PayRecordServiceType.Commission.getIndex(),
				(long) orderId });
	}

	/**
	 * @Description(功能描述) : 增加金额(账户充值)
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public void plusBalance4Recharge(int userId, double plus)
			throws FrameworkException {
		PayRecord record = new PayRecord(Integer.toString(userId),
				MallEnum.PayRecordServiceType.RechargePlus.getIndex(), 0,
				(long) userId, (long) userId, BigDecimal.valueOf(plus),
				BigDecimal.valueOf(0), BigDecimal.valueOf(0),
				BigDecimal.valueOf(0),
				MallEnum.PayRecordType.Success.getIndex(), DateUtil.getGMTDate(), "账户充值");
		this.save(record);
	}

	/**
	 * @Description(功能描述) : 增加金额(销售结算)
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public void plusBalance4Settlement(int userId, double plus, int orderId)
			throws FrameworkException {
		PayRecord record = new PayRecord(Integer.toString(userId),
				MallEnum.PayRecordServiceType.SettlementPlus.getIndex(),
				orderId, (long) userId, (long) userId,
				BigDecimal.valueOf(plus), BigDecimal.valueOf(0),
				BigDecimal.valueOf(0), BigDecimal.valueOf(0),
				MallEnum.PayRecordType.Success.getIndex(), DateUtil.getGMTDate(), "销售结算");
		this.save(record);
	}

	/**
	 * @Description(功能描述) : 冻结转余额
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public void plusBalance4UntFrozen(int userId, double plus, int orderId)
			throws FrameworkException {
		PayRecord record = new PayRecord(Integer.toString(userId),
				MallEnum.PayRecordServiceType.Frozen2Blance.getIndex(),
				orderId, (long) userId, (long) userId,
				BigDecimal.valueOf(plus), BigDecimal.valueOf(0),
				BigDecimal.valueOf(0), BigDecimal.valueOf(0),
				MallEnum.PayRecordType.Success.getIndex(), DateUtil.getGMTDate(), "冻结转余额");
		this.save(record);
	}

	/**
	 * @Description(功能描述) : (销售结算)数量
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public int getPaySize4Settlement(int userId, int orderId)
			throws FrameworkException {
		String hql = "select count(*) from PayRecord where primaryId=? and serviceType=? and typeId=?";
		return this.getTotal(hql, new Object[] { Integer.toString(userId),
				MallEnum.PayRecordServiceType.SettlementPlus.getIndex(),
				(long) orderId });
	}

	/**
	 * @Description(功能描述) :获取用户佣金列表
	 * @author(作者) : ventrue
	 * @throws FrameworkException
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	public List<PayRecord> findPayRecord(long userId)
			throws FrameworkException {
		StringBuilder hql = new StringBuilder();
		hql.append("from PayRecord model where serviceType=2 and model.inUserId=? order by recordId desc");
		return this.list(hql.toString(), new Object[] { userId });
	}
}
