package com.mall.web.mall.member.service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.time.DateUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mall.common.exception.FrameworkException;
import com.mall.common.util.BaseUtil;
import com.mall.common.util.DateUtil;
import com.mall.web.mall.common.utils.MallEnum.UgradeValue;
import com.mall.web.mall.domain.Member;
import com.mall.web.mall.domain.MemberDeposit;
import com.mall.web.mall.member.dao.WebMemberDao;
import com.mall.web.mall.member.dao.WebMemberDepositDao;
import com.mall.web.mall.member.dao.WebMemberPayRecordDao;
import com.mall.web.mall.member.vo.MemberPayRecordVo;
import com.mall.web.mall.member.vo.WebMemberDepositVo;
import com.mall.web.mall.member.vo.WebMemberVo;
import com.mall.web.mobile.member.vo.MobMemberVo;
import com.mall.web.pay.domain.PayRecord;

@Service("webMemberService")
public class WebMemberService {
	private static Logger logger = Logger.getLogger(WebMemberService.class);

	@Resource(name = "webMemberDao")
	private WebMemberDao webMemberDao;

	@Resource(name = "webMemberDepositDao")
	private WebMemberDepositDao webMemberDepositDao;

	@Resource(name = "webMemberPayRecordDao")
	private WebMemberPayRecordDao webMemberPayRecordDao;

	/**
	 * 根据用户id获取用户头像
	 * 
	 * @param userId
	 *            用户id
	 * @return 会员信息
	 */
	@Transactional(readOnly = true)
	public String getUserPortrait(int userId) {
		Member member = webMemberDao.getUserInfo(userId);
		return WebMemberVo.bean2Vo(member).getPortrait();
	}

	/**
	 * 根据用户名称获取会员信息 caokw
	 * 
	 * @param userName
	 *            用户名称
	 * @return 会员信息
	 */
	@Transactional(readOnly = true)
	public WebMemberVo getUserInfo(int userId) {
		Member member = webMemberDao.getUserInfo(userId);
		return WebMemberVo.bean2Vo(member);
	}

	/**
	 * 根据用户名称获取会员信息 caokw
	 * 
	 * @param userName
	 *            用户名称
	 * @return 会员信息
	 */
	@Transactional(readOnly = true)
	public WebMemberVo getUserInfo(String userName) {
		Member member = webMemberDao.getUserInfo(userName);
		return WebMemberVo.bean2Vo(member);
	}

	/**
	 * 根据用户名称获取会员信息 caokw
	 * 
	 * @param userName
	 *            用户名称
	 * @return 会员信息
	 */
	@Transactional(readOnly = true)
	public Member getMember(String userName) {
		return webMemberDao.getUserInfo(userName);
	}

	/**
	 * 更新手机号码
	 * 
	 * @param userId
	 *            用户id
	 * @param phone
	 *            手机号码
	 * @throws FrameworkException
	 */
	@Transactional
	public boolean updatePhone(int userId, String phone)
			throws FrameworkException {
		return webMemberDao.updatePhone(userId, phone);
	}

	/**
	 * 更新`邮箱是否激活`标识。
	 * 
	 * @author sol
	 * @param userId
	 *            用户ID。
	 * @param isEmailActivated
	 *            邮箱是否激活。可选值为0或1。
	 * @return 操作是否成功
	 * @throws FrameworkException
	 */
	@Transactional
	public boolean updateIsEmailActivated(int userId, String isEmailActivated)
			throws FrameworkException {
		return webMemberDao.updateIsEmailActivated(userId, isEmailActivated);
	}

	/**
	 * 获取登录密码。（MD5加密）
	 * 
	 * @author sol
	 * @param userId
	 *            用户编号
	 */
	@Transactional(readOnly = true)
	public String getPassword(int userId) {
		return webMemberDao.getPassword(userId);
	}

	/**
	 * 更新登录密码。
	 * 
	 * @author sol
	 * @param userId
	 *            用户编号
	 * @param paymentPassword
	 *            新的支付密码（MD5加密）
	 * @throws FrameworkException
	 */
	@Transactional
	public boolean updatePassword(int userId, String password)
			throws FrameworkException {
		return webMemberDao.updatePassword(userId, password);
	}

	/**
	 * 获取支付密码。
	 * 
	 * @author sol
	 * @param userId
	 *            用户编号
	 * @return 用户支付密码
	 * @throws FrameworkException
	 */
	@Transactional(readOnly = true)
	public String getPaymentPassword(int userId) throws FrameworkException {
		return webMemberDepositDao.getPaymentPassword(userId);
	}

	@Transactional(readOnly = true)
	public String getPaymentSalt(int userId) throws FrameworkException {
		return webMemberDepositDao.getPaymentSalt(userId);
	}

	/**
	 * 更新支付密码。
	 * 
	 * @author sol
	 * @param userId
	 *            用户编号
	 * @param paymentPassword
	 *            新的支付密码
	 * @throws FrameworkException
	 */
	@Transactional
	public boolean updatePaymentPassword2(int userId, String paymentPassword,
			String salt) throws FrameworkException {
		return webMemberDepositDao.updatePaymentPassword2(userId,
				paymentPassword, salt);
	}

	public boolean updatePaymentPassword(int userId, String paymentPassword)
			throws FrameworkException {
		return webMemberDepositDao.updatePaymentPassword(userId,
				paymentPassword);
	}

	/*******************************************************************************
	 * 获取余额。
	 * 
	 * @author sol
	 * @param userId
	 *            用户编号
	 * @return 用户余额
	 * @throws FrameworkException
	 */

	/*
	 * 白总监写的。直接调用get方法(继承自BaseDao)获取实体。Dao层不用再写新方法获取UserID public double
	 * getBlance(int userId) throws FrameworkException { YzmMemberDeposit bean =
	 * webMemberDepositDao.get(userId); return (Double) (bean != null ?
	 * bean.getBalance(): 0); }
	 */
	public double getBlance(int userId) throws FrameworkException {
		return webMemberDepositDao.showbalance(userId);
	}

	/*******************************************************************************
	 * 获取会员账户详细信息！！！。
	 * 
	 * @param userId
	 *            用户编号
	 * @return 会员支付账户实例
	 * @throws FrameworkException
	 */
	@Transactional
	public WebMemberDepositVo getMemberDeposit(int userId)
			throws FrameworkException {
		MemberDeposit memberDeposit = webMemberDepositDao.get(userId);
		WebMemberDepositVo res = WebMemberDepositVo.bean2Vo(memberDeposit); // 封装
		return res;
	}

	/**
	 * @Description(功能描述) : 返回帐户信息
	 * @author(作者) : wangliyou
	 * @date (开发日期) : 2015年12月29日 下午3:01:49
	 */
	public MemberDeposit findMemberDeposit(int userId)
			throws FrameworkException {
		return webMemberDepositDao.get(userId);
	}

	/**
	 * @Description(功能描述) : 保存或更新用户帐户信息
	 * @author(作者) : wangliyou
	 * @date (开发日期) : 2015年12月29日 下午2:55:03
	 */
	@Transactional
	public void saveOrUpdayeDeposit(MobMemberVo user, BigDecimal faceValue)
			throws FrameworkException {
		MemberDeposit deposit = webMemberDepositDao.get(user.getUserId());
		if (BaseUtil.isNotEmpty(deposit)) { // 更新余额
			// deposit.setBalance(deposit.getBalance()+faceValue.doubleValue());
			// webMemberDepositDao.update(deposit);
			webMemberDepositDao.plusBalance(user.getUserId(),
					faceValue.doubleValue());
		} else {
			deposit = new MemberDeposit();
			deposit.setUserId(user.getUserId());
			deposit.setIsActivated(1);
			deposit.setBalance(faceValue.doubleValue());
			deposit.setInitialBalance(0);
			deposit.setLastInitialBalance(0);
			deposit.setLastLastInitialBalance(0);
			deposit.setOperateTime(DateUtil.getGMTDate());
			deposit.setPhone(user.getPhoneMob());
			deposit.setPoint(0);
			webMemberDepositDao.save(deposit);
		}
	}

	/**
	 * @Description(功能描述) : 保存或更新用户帐户信息
	 * @author(作者) : wangliyou
	 * @date (开发日期) : 2015年12月29日 下午2:55:03
	 */
	@Transactional
	public void saveOrUpdayeDeposit(int userId, BigDecimal faceValue)
			throws FrameworkException {
		MemberDeposit deposit = webMemberDepositDao.get(userId);
		if (BaseUtil.isNotEmpty(deposit)) { // 更新余额
			webMemberDepositDao.plusBalance(userId, faceValue.doubleValue());
		} else {
			Member member = webMemberDao.get(userId);
			deposit = new MemberDeposit();
			deposit.setUserId(userId);
			deposit.setIsActivated(1);
			deposit.setBalance(faceValue.doubleValue());
			deposit.setInitialBalance(0);
			deposit.setLastInitialBalance(0);
			deposit.setLastLastInitialBalance(0);
			deposit.setOperateTime(DateUtil.getGMTDate());
			deposit.setPhone(member.getPhoneMob());
			deposit.setPoint(0);
			webMemberDepositDao.save(deposit);
		}
	}

	/**
	 * @Description(功能描述) : 开通用户账户（为新用户开通资金账户）
	 * @author(作者) : ventrue
	 * @date (开发日期) : 2015年12月29日 下午2:55:03
	 */
	@Transactional
	public void openNewAccount(int userid, String mobile) {
		try {
			MemberDeposit deposit = webMemberDepositDao.get(userid);
			if (BaseUtil.isNotEmpty(deposit)) {
				return;
			} else {
				deposit = new MemberDeposit();
				deposit.setUserId(userid);
				deposit.setIsActivated(1);
				deposit.setBalance(0);
				deposit.setInitialBalance(0);
				deposit.setLastInitialBalance(0);
				deposit.setLastLastInitialBalance(0);
				deposit.setOperateTime(DateUtil.getGMTDate());
				deposit.setPhone(mobile);
				deposit.setPoint(0);
				webMemberDepositDao.save(deposit);
			}
		} catch (Exception e) {
			logger.warn(e);
			e.printStackTrace();
		}
	}

	/*******************************************************************************
	 * 获取资金变动信息
	 * 
	 * @param PageBean
	 *            不了解，
	 * @return 会员资金变动信息
	 * @throws FrameworkException
	 */

	// 一：含参数
	// @Transactional(readOnly = true)
	// public List<MemberPayRecordVo> showMemberPayRecord(PageBean page) throws
	// FrameworkException {
	// List<MemberPayRecordVo> list = new ArrayList<MemberPayRecordVo>();
	// List<YzmPayRecord> beans =
	// WebMemberPayRecordDao.showMemberPayRecord((page.getCurPage()>0?page.getCurPage()-1:page.getCurPage())*page.getPageSize(),
	// page.getPageSize());
	//
	// if(beans != null) {
	// for(YzmPayRecord bean: beans) {
	// MemberPayRecordVo vo = MemberPayRecordVo.bean2Vo(bean);
	// list.add(vo);
	// }
	// }
	// return list;
	// }

	// 二、：不含参数
	@Transactional(readOnly = true)
	public List<MemberPayRecordVo> showMemberPayRecord()
			throws FrameworkException {
		List<MemberPayRecordVo> list = new ArrayList<MemberPayRecordVo>();
		List<PayRecord> beans = webMemberPayRecordDao
				.showMemberPayRecord(DateUtils.addDays(DateUtil.getGMTDate(),
						-90)); // DateUtils.addDays
		// 结果是个？

		if (beans != null) {
			for (PayRecord bean : beans) {
				MemberPayRecordVo vo = MemberPayRecordVo.bean2Vo(bean);
				list.add(vo);
			}
		}
		return list;
	}

	/**
	 * @Description(功能描述) : 保存用户
	 * @author(作者) : wangliyou
	 * @date (开发日期) : 2015年10月16日 下午5:48:24
	 * @param member
	 */
	@Transactional
	public int saveMember(Member member) {
		try {
			member.setRegTime(DateUtil.getGMTDate());
			return (Integer) webMemberDao.save(member);
		} catch (FrameworkException e) {
			e.printStackTrace();
		}
		return 0;
	}

	/**
	 * @Description(功能描述) : 保存用户
	 * @author(作者) : wangliyou
	 * @date (开发日期) : 2015年10月16日 下午5:48:24
	 * @param member
	 */
	@Transactional
	public void updateMember(Member member) {
		try {
			webMemberDao.update(member);
		} catch (FrameworkException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @Description(功能描述) : 根据用户名和密码查询用户
	 * @author(作者) : wangliyou
	 * @date (开发日期) : 2015年10月16日 下午5:51:54
	 * @param userName
	 *            : 用户名
	 * @param password
	 *            : 密码
	 * @return
	 */
	public Member getUserInfo(String userName, String password) {
		return webMemberDao.getUserInfo(userName, password);
	}

	/**
	 * @Description(功能描述) : 根据用户id查询用户
	 * @author(作者) : wangliyou
	 * @date (开发日期) : 2015年12月24日 下午2:15:44
	 * @param userId
	 *            : 用户id
	 */
	public Member getMember(int userId) {
		try {
			return webMemberDao.get(userId);
		} catch (FrameworkException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * @Description(功能描述) : 升级用户级别
	 * @author(作者) : ventrue
	 * @date (开发日期) : 2015年12月19日 上午10:38:19
	 */
	@Transactional
	public void plusUgrade() {
		// 钻石
		webMemberDao.plusUgrade(UgradeValue.ZHUANSHI.getIndex(),
				UgradeValue.ZHUANSHI.getName().intValue());
		// 金牌
		webMemberDao.plusUgrade(UgradeValue.JINGPAI.getIndex(),
				UgradeValue.JINGPAI.getName().intValue());
		// 银牌
		webMemberDao.plusUgrade(UgradeValue.YINGPAI.getIndex(),
				UgradeValue.YINGPAI.getName().intValue());
		// 铜牌
		webMemberDao.plusUgrade(UgradeValue.TONGPAI.getIndex(),
				UgradeValue.TONGPAI.getName().intValue());
	}
}
